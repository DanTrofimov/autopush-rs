# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_EMAIL   - login info for docker hub
# DOCKER_USER
# DOCKER_PASS
#
version: 2
jobs:
  audit:
    docker:
      - image: circleci/rust:latest
    steps:
      - checkout
      - run:
          name: Setup rust
          command: |
            rustup install stable
            rustup default stable
            rustup update
            cargo install cargo-audit
            rustc --version
      - run:
          name: Do audit
          command: |
            # cargo audit
            echo audit temporarily disabled

  test:
    docker:
      - image: circleci/python:2.7
      - image: circleci/dynamodb
        command: -sharedDb -inMemory
    environment:
      AWS_LOCAL_DYNAMODB: http://localhost:8000
    steps:
      - checkout
      - restore_cache:
          name: Restoring Python cache
          key: python-v1-{{ checksum "requirements.txt" }}-{{ checksum "test-requirements.txt" }}
      - restore_cache:
          name: Restoring Rust cache
          key: rust-v1-{{ .Branch }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Set up Python
          command: |
            curl https://raw.githubusercontent.com/mozilla-services/autopush/master/requirements.txt > requirements.txt
            curl https://raw.githubusercontent.com/mozilla-services/autopush/master/test-requirements.txt > test-requirements.txt
            pip install --upgrade pip
            pip install bottle
            pip install -r requirements.txt
            pip install -r test-requirements.txt
            pip install git+https://github.com/mozilla-services/autopush.git#egg=autopush
      - run:
          name: Set up Rust
          command: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            export PATH=$PATH:$HOME/.cargo/bin
            echo 'export PATH=$PATH:$HOME/.cargo/bin' >> $BASH_ENV
            rustc --version
            cargo build
      - run:
          name: Check formatting
          command: cargo fmt -- --check
      - run:
          name: Integration tests
          command: py.test -v
      - run:
          name: Rust tests
          command: cargo test
      - save_cache:
          name: Save Python cache
          key: python-v1-{{ checksum "requirements.txt" }}-{{ checksum "test-requirements.txt" }}
          paths:
            - /home/circleci/.local/bin/
            - /home/circleci/.local/lib/
      - save_cache:
          name: Save Rust cache
          key: rust-v1-{{ .Branch }}-{{ checksum "Cargo.lock" }}
          paths:
            - target
            - ~/.cargo/registry
            - ~/.cargo/git

  build:
    docker:
      - image: docker:18.03.0-ce
    working_directory: /dockerflow
    steps:
      - run:
          name: Install Docker build dependencies
          command: apk add --no-cache openssh-client git

      - checkout
      - setup_remote_docker

      - run:
          name: Create a version.json
          command: |
            # create a version.json per https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            "$CIRCLE_TAG" \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" > version.json

      - run:
          name: Build Docker image
          command: docker build -t app:build .

      # save the built docker container into CircleCI's cache. This is
      # required since Workflows do not have the same remote docker instance.
      - run:
          name: docker save app:build
          command: mkdir -p /cache; docker save -o /cache/docker.tar "app:build"
      - save_cache:
          key: v1-{{ .Branch }}-{{ .Environment.CIRCLE_TAG }}-{{ epoch }}
          paths:
            - /cache/docker.tar

  deploy:
    docker:
      - image: docker:18.03.0-ce
    steps:
      - setup_remote_docker
      - restore_cache:
          key: v1-{{ .Branch }}-{{ .Environment.CIRCLE_TAG }}
      - run:
          name: Restore Docker image cache
          command: docker load -i /cache/docker.tar

      - run:
          name: Deploy to Dockerhub
          command: |
            # deploy master
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker tag app:build ${DOCKERHUB_REPO}:latest
              docker push ${DOCKERHUB_REPO}:latest
            elif  [ ! -z "${CIRCLE_TAG}" ]; then
            # deploy a release tag...
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              echo "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker tag app:build "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker images
              docker push "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
            fi

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - audit:
          filters:
            tags:
              only: /.*/

      - test:
          filters:
            tags:
              only: /.*/

      - build:
          filters:
            tags:
              only: /.*/

      - deploy:
          requires:
            - build
            - test
          filters:
            tags:
              only: /.*/
            branches:
              only: master
